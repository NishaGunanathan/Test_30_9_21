InternalClassType: Method
Coordinate3D: [25.05,-34.65,0]
Name: prepChart
Origin: 5ae5800c-dfab-47ad-aedc-4711f1a601a2
Program: |+1
 -- prepare the chart of interesting values
 -- quartile and median: look at http://kortenkamps.net/material/stochastik/Quartile.html
 -- called by: APPLY of the advanced dialog, Chart button of the main dialog, prepare HTML
 -- via checkboxes "MinMaxDiagram" and "ConfidenceDiagram"
 
 var AttrStr,str:string
 var i,k,rowRes,colRes,n,m,u: integer
 	
 var delta:real := 0.08
 var cNo:integer := 3 -- blue, color for the intervals
 var tab:table := Chart.DisplayedOutputValues
 if Kind_Output.numberOfOutputValues > 0 
 	if tab[1,1] = ""  -- use the first numerical output value
 		for k := 1 to output.ydim 
 			str := output[1,k]
 			if NOT isOutTable(str) 
 				tab[1,1] := str
 				exitloop
 			end
 		next
 	end -- use the first output value
 else
 	tab.delete -- no numerical output value
 end
 
 var OutChartTab:table := chart.meanValueTable
 var AnnotationsTab:table := Chart.Annotationstable
 
 OutChartTab.delete({0,0}..{*,*})
 AnnotationsTab.delete
 var detailRes:object := DetailedResults
 
 k := 0
 for i := 1 to ExpTable.yDim 
 	if ExpTable[1,i] AND (detailRes[1,i] /= void)  -- if active experiment with results
 		k := k + 1
 		OutChartTab[0,k] := detailRes[0,i]
 	end
 next
 
 if UsingRules 
 	while i < NumRulesExp 
 		i += 1
 		k += 1
 		OutChartTab[0,k] := ExpTable.getExpID(i)
 	end
 else
 	if OutChartTab.YdimIndex = 0 
 		OutChartTab[0,1] := "Exp 1"
 	end
 end
 
 -- Title of the chart
 if ChartType = "MinMaxDiagram" 
 	-- Min-max intervals of selected result values
 	str := rootfolder.Localization.getText(115)
 else
 	-- Confidence intervals of selected result values
 	str := rootfolder.Localization.getText(118)
 end
 Chart.Title := str
 
 -- select the output value in case of one output value
 -- (tab = Chart.DisplayedOutputValues, selection of output values via the button 'Variable')
 if tab.yDim = 0 
 	str := ValueDescriptions.get(Output[1,1])
 	OutChartTab[1,0] := str -- OutChartTab := chart.meanValueTable
 	Chart.legendLocation := "(Off)"
 	Chart.yLabel := str
 	colRes := detailRes.getColumnNo(str)
 	if colRes > 0
 		OutChartTab.setDataType(1, detailRes.getDataType(colRes))
 	else
 		-- Because OutChartTab.dataType = "real" nothing has to be done
 	end
 else -- tab.yDim > 0
 	for k := tab.yDim downto 1
 		str := ValueDescriptions.get(tab[1,k])
 		colRes := detailRes.getColumnNo(str)
 		if colRes < 1
 			tab.cutRow(k)	
 		end
 	next
 		
 	for k := 1 to tab.yDim 
 		str := ValueDescriptions.get(tab[1,k])
 		OutChartTab[k,0] := str
 		colRes := detailRes.getColumnNo(str)
 		if colRes > 0
 			OutChartTab.setDataType(k, detailRes.getDataType(colRes))
 		else
 			-- Because OutChartTab.dataType = "real" nothing has to be done
 		end	
 	next
 	-- Legend
 	if tab.yDim = 1 
 		str := ValueDescriptions.get(tab[1,1])
 		Chart.legendLocation := "(Off)"
 		Chart.yLabel := str
 	else
 		Chart.legendLocation := "Right"
 		Chart.yLabel := ""
 	end
 end
 
 -- calc confidence intervals
 -- n := ~.numRuns: sample size (# observations)
 k := 1
 var showConf:boolean := (ChartType = "ConfidenceDiagram")
 var yScaleMin:real := 1E300
 var yScaleMax:real := -1E300 -- instead of 0
 var my,stdDev,minVal,maxVal:real
 var oTab:table
 for k := 1 to tab.yDim  -- Chart.DisplayedOutputValues
 	cNo := k -- first color = blue
 	AttrStr := tab[1,k] -- output value to be displayed
 	if isOutTable(AttrStr)
 		tab.cutRow(k)
 	else -- is not an output table
 		
 	
 
 		str := ValueDescriptions.get(AttrStr)
 		colRes := detailRes.getColumnNo(str)
 		if colRes > 0 AND (NOT isOutTable(AttrStr))  -- It is a valid output value.
 			var isAttrTime:boolean := (detailRes.getDataType(colRes) = "time")
 			for var ExpNo := 1 to OutChartTab.YDimIndex 
 				rowRes := detailRes.getRowNo(OutChartTab[0,ExpNo])
 				if rowRes > 0 AND detailRes[colRes+6,rowRes]/=void  -- else no results for this experiment
 				
 					oTab := detailRes[colRes+6,rowRes].copy -- all observations
 					n := oTab.yDim -- read_again after increasing the number of observations
 					if n > 0 
 						my := 0
 						if NOT detailRes[colRes,rowRes].void -- else detailRes.asString = "VOID"
 							if isAttrTime 
 								my := str_to_time(detailRes.asString(colRes,rowRes))
 							else
 								my := str_to_num(detailRes.asString(colRes,rowRes))
 							end
 						end
 						-- read_the cell detailRes[colRes ,rowRes] as real
 						stdDev := detailRes[colRes+1,rowRes] -- only for check > 0
 						yScaleMax := max(yScaleMax,my)
 						yScaleMin := min(yScaleMin,my)
 						OutChartTab[k,ExpNo] := detailRes[colRes,rowRes] -- main curve
 						if stdDev > 0 
 								
 							if showConf 									
 								minVal := detailRes[colRes+4,rowRes]-- left conf
 								maxVal := detailRes[colRes+5,rowRes]-- right conf
 								
 								yScaleMax := max(yScaleMax,maxVal)
 								yScaleMin := min(yScaleMin,minVal)
 								
 								yScaleMax := max(yScaleMax, detailRes[colRes+3,rowRes])-- max
 								yScaleMin := min(yScaleMin, detailRes[colRes+2,rowRes])-- min
 					
 								-- meaning of the columns: '0=Vertical','Value','From','To','Color','Style','Text'
 								AnnotationsTab.writeRow(1, AnnotationsTab.ydim + 1, 0, ExpNo,minVal,maxVal,cNo,0 )
 								AnnotationsTab.writeRow(1, AnnotationsTab.ydim + 1, 1, minVal, ExpNo - delta, ExpNo + delta,cNo,0 )
 								AnnotationsTab.writeRow(1, AnnotationsTab.ydim + 1, 1, maxVal, ExpNo - delta, ExpNo + delta,cNo,0 )
 							
 							else -- min-max
 														
 								minVal := detailRes[colRes+2,rowRes]-- min
 								maxVal := detailRes[colRes+3,rowRes]-- max
 								
 								yScaleMax := max(yScaleMax,maxVal)
 								yScaleMin := min(yScaleMin,minVal)
 							
 								yScaleMax := max(yScaleMax, detailRes[colRes+5,rowRes])-- right conf
 								yScaleMin := min(yScaleMin, detailRes[colRes+4,rowRes])-- left conf									
 							
 								var showQuartiles:boolean := (NOT showConf) AND MinMaxWithQuartiles AND (n > 2)
 								if showQuartiles  -- Boxplot is possible with the data
 									var Q1,Q2,Q3:real
 									for var g := oTab.ydim downto 1 
 										if oTab[1,g]=void 
 											oTab.cutRow(g)
 										end
 									next
 									n := oTab.ydim
 						
 									oTab.sort(1,"up")
 									m := n div 2
 									u := n div 4
 								
 									switch n mod 4
 									case 0 	-- 4,8,12			
 										Q2 := (oTab[1,m] + oTab[1,m+1])/2
 										Q1 := (oTab[1,u] + oTab[1,u+1])/2
 										Q3 := (oTab[1,m+u] + oTab[1,m+u+1])/2
 									case 1  -- 5,9				
 										Q2 := oTab[1,m+1]
 										Q1 := (oTab[1,u] + oTab[1,u+1])/2
 										Q3 := (oTab[1,m+u+1] + oTab[1,m+u+2])/2
 									case 2  -- 6,10
 										Q2 := (oTab[1,m] + oTab[1,m+1])/2
 										Q1 := oTab[1,u+1]
 										Q3 := oTab[1,m+u+1]
 									case 3  -- 3,7,11			
 										Q2 := oTab[1,m+1]
 										Q1 := oTab[1,u+1]
 										Q3 := oTab[1,m+u+2]
 									end
 				
 									-- min-max with boxplots:
 									-- meaning of the columns: '0=Vertical','Value','From','To','Color','Style','Text'
 									AnnotationsTab.writeRow(1, AnnotationsTab.ydim + 1, 0, ExpNo,Q3,maxVal,cNo,0 )
 									AnnotationsTab.writeRow(1, AnnotationsTab.ydim + 1, 0, ExpNo,minVal,Q1,cNo,0 )
 									AnnotationsTab.writeRow(1, AnnotationsTab.ydim + 1, 0, ExpNo + delta,Q1,Q3,cNo,0 )
 									AnnotationsTab.writeRow(1, AnnotationsTab.ydim + 1, 0, ExpNo - delta,Q1,Q3,cNo,0 )
 
 									AnnotationsTab.writeRow(1, AnnotationsTab.ydim + 1, 1, Q1, ExpNo - delta, ExpNo + delta,cNo,0 )
 									AnnotationsTab.writeRow(1, AnnotationsTab.ydim + 1, 1, Q2, ExpNo - delta, ExpNo + delta,cNo,0 )
 									AnnotationsTab.writeRow(1, AnnotationsTab.ydim + 1, 1, Q3, ExpNo - delta, ExpNo + delta,cNo,0 )
 					
 									AnnotationsTab.writeRow(1, AnnotationsTab.ydim + 1, 1, maxVal, ExpNo - delta, ExpNo + delta,cNo,0 )
 									AnnotationsTab.writeRow(1, AnnotationsTab.ydim + 1, 1, minVal, ExpNo - delta, ExpNo + delta,cNo,0 )
 					
 								else -- -- Boxplot is possible with the data, therefore show min-max without boxplots:
 									AnnotationsTab.writeRow(1, AnnotationsTab.ydim + 1, 0, ExpNo,minVal,maxVal,cNo,0 )
 									AnnotationsTab.writeRow(1, AnnotationsTab.ydim + 1, 1, minVal, ExpNo - delta, ExpNo + delta,cNo,0 )
 									AnnotationsTab.writeRow(1, AnnotationsTab.ydim + 1, 1, maxVal, ExpNo - delta, ExpNo + delta,cNo,0 )
 								end
 							end
 						end -- if stdDev > 0 
 					end -- oTab.yDim>0			
 			
 				end -- else no results for this experiment
 			next-- ExpNo
 		end -- if: It is a valid output value.
 	end -- is not an output table
 	
 next  -- k: No of displayed output value
 
 delta := (yScaleMax - yScaleMin) * 0.05
 
 Chart.yScaleMax := yScaleMax + delta
 Chart.yScaleMin := yScaleMin - delta
 Chart.annotations.delete
 Chart.annotations := Chart.annotations
 Chart.annotations.insertList(1,1, AnnotationsTab.copy({1,1}..{7,*}))
RandomSeed: 193
UUID: 749fef26-68b3-4815-80b6-748cf4744a5d
$IconAttributes:
 CurrIconNo: 0
 Matrix: [1,0,0,1]
 ChangedRotation: true
 ChangedScaling: true
